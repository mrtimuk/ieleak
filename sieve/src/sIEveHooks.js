if ( ! window.__sIEve_hooked )
{
	window.__sIEve_hooked = true;

	var __sIEve_jsHook;

	var __sIEve_initializeHooks = function(jsHook)
	{
		__sIEve_jsHook = jsHook;
	}

	var __sIEve_beforeUnloadWindow = function()
	{
		window.detachEvent('onunload',arguments.callee);
		__sIEve_jsHook.unloadWindow(window.document);
	}

	try
	{
		if ( ! window.navigator.__sIEve_documentId ) window.navigator.__sIEve_documentId = 0;
		var __sieve_documentId = ++window.navigator.__sIEve_documentId; // Autogenerated documentId;

		window.attachEvent('onunload',__sIEve_beforeUnloadWindow);
	} 
	catch (err) {} //Ignore errors on close of sIEve

	var __sIEve_logNode = function(node)
	{
		__sIEve_jsHook.logNode(node);
		var child = node.firstChild;
		while ( child ) {
			__sIEve_logNode(child);
			child = child.nextSibling;
		}
	}
		
	var __sIEve_logDetectedCycle = function(node)
	{
		__sIEve_jsHook.logDetectedCycle(node);
	}
	
	if ( ! window.__sIEve_nativeCreateElement )
	{	
		var __sIEve_nativeCreateElement = window.document.createElement;
		window.document.createElement = function(tag) {
			var node = __sIEve_nativeCreateElement(tag);
			__sIEve_logNode(node);
			return node;
		};
	}
	else
	{
		__sIEve_jsHook.logMessage("ERROR: __sIEve_nativeCreateElement existing!?  " + window.location.href);
	}

	var __sIEve_onPropertyChange = function ()
	{
		if (window.event.propertyName == 'innerHTML') {
			__sIEve_logNode(window.event.srcElement);
		}
	}

	var __sIEve_hookNode = function(node)
	{
		if (node.nodeType == 1 && !node.__sIEve_hookedNode)
		{
			try
			{
				node.__sIEve_hookedNode = true;
				if (typeof node.attachEvent != 'undefined')
					node.attachEvent('onpropertychange', __sIEve_onPropertyChange);
				node.cloneNode = __sIEve_customCloneNode;
			}
			catch ( err ) { } //Some nodes doesn't allow override e.g. <EMBED>
		}
	}

	var __sIEve_customCloneNode = function(deep)
	{	
		var self = this;
		self.removeAttribute("cloneNode"); // Remove the override (to avoid problems with clones of clones)
		var clone = self.cloneNode(deep);  // Call the original native method
		self.cloneNode = arguments.callee; // Restore the override	
		if ( clone )
		{
			__sIEve_logNode(clone);
		}
		return clone;
	}

	try
	{
		//Filling array with default property names which don't need to be scanned
		var ___sIEve_defaultProperties = new Array();
		var ____sIEve_dummyNode = __sIEve_nativeCreateElement("div"); // Don't log this node
		for ( var __sIEve_i in ____sIEve_dummyNode ) ___sIEve_defaultProperties[__sIEve_i] = true;
		___sIEve_defaultProperties["cloneNode"] = true;
		___sIEve_defaultProperties["___sIEve_refs"] = true;
		___sIEve_defaultProperties["__sIEve_nativeCloneNode"] = true;
		var ____sIEve_dummyNode = null;
		var ___sIEve_markedObjects = null;
		window.navigator.___sIEveCrossRefScanId = 0;
	}
	catch (err) {} //Ignore errors on close of sIEve


	var ___sIEve_crossRefScan = function(object)
	{
		___sIEve_markedObjects = new Array();
		___sIEve_crossRefScanObject(object,object,++window.navigator.___sIEveCrossRefScanId,"");
		for ( var i = 0; i < ___sIEve_markedObjects.length; i++)
		{
			// Delete the scanned mark for either a HTMLDom object or jsobject; Try both types; one will fail.
			try { 	delete ___sIEve_markedObjects[i].__sIEveScannedMark } catch (err) {}
			try {	___sIEve_markedObjects[i].removeAttribute("__sIEveScannedMark"); } catch (err) {} 
		}
		___sIEve_markedObjects = null;
	}

	var ___sIEve_identifyObject = function(object)
	{
		var idstr = "";
		if ( object && typeof(object.nodeType) != "undefined" && typeof(object.className) != "undefined" )  // To be sure target is HTMLElement
		{
			idstr = "<"+object.nodeName + (object.id=="" ? "" : (" id='"+object.id+"'"))+ ">";
		}
		else
		{
			idstr = "["+___sIEve_typeof(object)+"]";
		}
		return idstr;
	}

	var ___sIEve_crossRefScanObject = function(sourceObject, object, crossRefScanId, referencePath)
	{
		if ( ___sIEve_isValidTarget(object) )
		{
			if ( typeof(object.__sIEveScannedMark) != "undefined" && object.__sIEveScannedMark == crossRefScanId)
			{
				if ( sourceObject == object )
				{
					sourceObject["_CIRCULAR REFERENCE: "+ referencePath] = "path = " + referencePath;
					__sIEve_logDetectedCycle(sourceObject);
				}
			}
			else		
			{
				try
				{
					object.__sIEveScannedMark = crossRefScanId;
					___sIEve_markedObjects[___sIEve_markedObjects.length] = object;
					if ( ___sIEve_isCollection(object) )
					{
						for ( var i=0; i<object.length; i++) 
						{
							var targetObject = object[i];
							var newReferencePath = referencePath + "." + i;
							___sIEve_crossRefScanObjectRegistration(sourceObject,targetObject,newReferencePath);
							if ( ___sIEve_isValidTarget(targetObject) ) ___sIEve_crossRefScanObject(sourceObject,targetObject,crossRefScanId,newReferencePath);
						}
					}
					else
					{
						for ( var i in object )
						{
							if ( ! ___sIEve_defaultProperties[i] )
							{
								var targetObject = object[i];
								var newReferencePath = referencePath + "." + i;
								___sIEve_crossRefScanObjectRegistration(sourceObject,targetObject,newReferencePath);
								if ( ___sIEve_isValidTarget(targetObject) ) ___sIEve_crossRefScanObject(sourceObject,targetObject,crossRefScanId,newReferencePath);
							}
						}
					}
				}
				catch (err) {}
			}
		}
	}

	var ___sIEve_crossRefScanObjectRegistration = function(sourceObject,targetObject, referencePath)
	{
		try
		{
			if ( targetObject && typeof(targetObject.nodeType) != "undefined" && typeof(targetObject.className) != "undefined" )  // To be sure target is HTMLElement
			{
				var index = ___sIEve_identifyObject(sourceObject)+referencePath;
				targetObject["_REFERENCE: " + index] = "path = " + index;
			}
		}
		catch ( err ) {}
	}

	var ___sIEve_isValidTarget = function(target)
	{
		try
		{
			if ( typeof(target.navigator) != "undefined" )
			{
				// Don't scan window objects
				return false;
			}
			if ( typeof(target.nodeType) != "undefined" && target.className == "undefined" )
			{
				// Don't scan XMLNodes
				return false;
			}
			if ( typeof(target.tagName) != "undefined")
			{
				var tagName = target.tagName;
				if ( tagName  == "LINK" ) 
				{
					//alert("LINK");
					return false;  // Don't scan <LINK>
				}
			} 
			var type = typeof(target);
			if ( type == "object" || type == "function" )
			{
				return true;
			}
		}
		catch (err) {}
		return false;
	}

	var ___sIEve_isCollection = function(target)
	{
		if ( typeof(target.item) != "undefined" )
		{
			return true;
		}
		return false;
	}

	//========== TEMP CODE FOR DEBUGGING
	var ___sIEve_typeof = function( vExpression )
	{	
		try
		{
			var sTypeOf = typeof vExpression;
			if( sTypeOf == "function" )
			{
				var sFunction = vExpression.toString();
				if( ( /^\/.*\/$/ ).test( sFunction ) )
				{
					return "regexp";
				}
				else if( ( /^\[object.*\]$/i ).test( sFunction ) )
				{
					sTypeOf = "object"
				}
			}
			if( sTypeOf != "object" )
			{
				return sTypeOf;
			}
			
			switch( vExpression )
			{
				case null:
					return "null";
				case window:
					return "window";
				case window.event:	
					return "event";
			}
			
			if( window.event && ( event.type == vExpression.type ) )
			{
				return "event";
			}
			
			var fConstructor = vExpression.constructor;
			if( fConstructor != null )
			{
				switch( fConstructor )
				{																	
					case Array:
						sTypeOf = "array";
						break;
					case Date:
						return "date";
					case RegExp:
						return "regexp";
					case Object:
						sTypeOf = "jsobject";
						break;
					case ReferenceError:
						return "error";
					default:
						var sConstructor = fConstructor.toString();
						var aMatch = sConstructor.match( /\s*function (.*)\(/ );
						if( aMatch != null )
						{
							return aMatch[ 1 ];
						}
					
				}
			}

			var nNodeType = vExpression.nodeType;
			if( nNodeType != null )
			{			
				switch( nNodeType )
				{
					case 1:
						if ( typeof(vExpression.className) == "string" )
						{
							return "htmldomnode";
						}
						else
						{
							return "xmldomnode";
						}
						break;
					case 3:
						if ( typeof(vExpression.specified) != "undefined" )
						{
							return "xmltextnode";
						}
						else
						{
							return "htmltextnode";
						}
				}
			}
			
			if( vExpression.toString != null )
			{
				var sExpression = vExpression.toString();
				var aMatch = sExpression.match( /^\[object (.*)\]$/i );
				if( aMatch != null )	
				{
					var sMatch = aMatch[ 1 ];
					switch( sMatch.toLowerCase() )
					{
						case "event":
							return "event";
						case "math":
							return "math";
						case "error":	
							return "error";
						case "mimetypearray":
							return "mimetypecollection";
						case "pluginarray":
							return "plugincollection";
						case "windowcollection":
							return "window";
						case "nodelist":
						case "htmlcollection":
						case "elementarray":
							return "domcollection";
					}
				}
			}
			
			if( vExpression.moveToBookmark && vExpression.moveToElementText )
			{
				return "textrange";
			}
			else if( vExpression.callee != null )
			{
				return "arguments";
			}
			else if( typeof(vExpression.item) != "undefined" )	
			{
				return "xmldomcollection";
			}
			return sTypeOf;
		}
		catch (err) {}
		return "undefined";
	}
}